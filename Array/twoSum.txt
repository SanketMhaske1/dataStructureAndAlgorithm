// brute force solution
    vector<int> twoSum(vector<int>& nums, int target) {

        vector<int>output(2,-1);
        int n = nums.size();

        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){

                if(nums[i]+nums[j] == target){
                    output[0] = i;
                    output[1] = j;
                    return output;
                }

            }
        }

        return output;
        
    }

Time Complexity = O(n^2)
Space Complexity = O(1)

//average solution

vector<int> twoSum(vector<int>& nums, int target) {

        unordered_map<int,int>temp;
        vector<int>output(2,-1);
        int n = nums.size();

        for(int i=0;i<n;i++){

            int findTarget = target-nums[i];
            auto check = temp.find(findTarget);

            if( check!= temp.end()){
                output[0] = check->second;
                output[1]=i;
            }
            temp[nums[i]] = i;

        }

        return output;
        
    }

Time Complexity = O(n)
Space Complexity = O(n)